{"version":3,"sources":["components/graph-node/graph-node-component.tsx","components/graph-container/graph-container.tsx","algorithms/algorithm-registry.tsx","components/dropdown/dropdown-component.tsx","algorithms/dijkstras-algorithm.tsx","algorithms/astar-algorithm.tsx","components/header/header.tsx","components/app-container/app-container.tsx","App.js","reportWebVitals.js","index.js"],"names":["GraphNodeComponent","props","typeTemplateMap","Map","set","className","nodeData","id","row","column","onMouseDown","onMouseEnter","onMouseUp","type","get","GraphContainer","maxCols","Math","floor","graphWidth","maxRows","graphHeight","useState","isMousePressed","_setMousePressed","isMousePressedRef","useRef","setMousePressed","setPressed","current","startNodeId","targetNodeId","console","log","getNewGraphWithWallToggle","graph","newGraph","slice","graphNode","getUpdatedType","onNodePressed","setGraph","onNodeEnter","onNodeUnpressed","createNode","getNodeId","currentId","getNodeType","previousNode","distance","Infinity","graphNodes","rowNum","currentRowColumns","colNum","push","createGraphNodes","currentType","graphComponent","map","rows","col","rowIdx","classNames","require","DropdownComponent","state","isDropdownOpen","closeDropdown","setState","setTimeout","window","addEventListener","removeEventListener","options","this","option","onClick","onSelectOption","data","label","dropdownTitleClass","clicked","unclicked","React","Component","keyVsAlgoConstructorMap","key","ctor","AlgorithmRegistry","register","Header","keyVsAlgoMap","GetImplementationMap","selectedAlgorithm","setSelectedAlgorithm","dropdownOptions","forEach","algo","getLabel","dropdownData","has","algorithm","doAThing","AppContainer","windowHeight","headerHeight","width","updateDimensions","headerElement","clientHeight","innerHeight","innerWidth","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wXAQO,SAASA,EAAmBC,GACjC,IAAMC,GAAkB,IAAIC,KACzBC,IAAI,QAAS,qBAAKC,UAAU,gBAC5BD,IAAI,SAAU,qBAAKC,UAAU,iBAC7BD,IAAI,OAAQ,qBAAKC,UAAU,UAJiB,EAc3CJ,EAAMK,SAPRC,EAP6C,EAO7CA,GACAC,EAR6C,EAQ7CA,IACAC,EAT6C,EAS7CA,OACAC,EAV6C,EAU7CA,YACAC,EAX6C,EAW7CA,aACAC,EAZ6C,EAY7CA,UACAC,EAb6C,EAa7CA,KAGF,OACE,qBACEN,GAAIA,EACJF,UAAU,aACVK,YAAa,kBAAMA,EAAYF,EAAKC,IACpCE,aAAc,kBAAMA,EAAaH,EAAKC,IACtCG,UAAW,kBAAMA,EAAUJ,EAAKC,IALlC,SAOGP,EAAgBY,IAAID,K,MCtBpB,SAASE,EAAed,GAC7B,IAEMe,EAAUC,KAAKC,MAAMjB,EAAMkB,WADd,IAEbC,EAAUH,KAAKC,MAAMjB,EAAMoB,YAHb,MADuB,EAMAC,oBAAkB,GANlB,mBAMpCC,EANoC,KAMpBC,EANoB,KAOrCC,EAAoBC,iBAAOH,GAC3BI,EAAkB,SAACC,GACvBH,EAAkBI,QAAUD,EAC5BJ,EAAiBI,IAVwB,EAarBN,mBAAQ,eACpBL,KAAKC,MAAME,EAAU,GADD,YACOJ,EAAUC,KAAKC,MAAgB,GAAVF,KADnDc,EAboC,sBAgBpBR,mBAAQ,eACrBL,KAAKC,MAAME,EAAU,GADA,YACMJ,EAAUC,KAAKC,MAAgB,GAAVF,KADnDe,EAhBoC,oBAmB3CC,QAAQC,IAAIH,EAAaC,GAEzB,IAeMG,EAA4B,SAChCC,EACA3B,EACAC,GAEA,IAAM2B,EAAWD,EAAME,QACjBC,EAAYF,EAAS5B,GAAKC,GAKhC,OAJA2B,EAAS5B,GAAKC,GAAd,2BACK6B,GADL,IAEEzB,KAAM0B,EAAeD,EAAUzB,QAE1BuB,GAGHI,EAAgB,SAAChC,EAAaC,GAClCkB,GAAgB,GAChBc,EAASP,EAA0BC,EAAO3B,EAAKC,KAG3CiC,EAAc,SAAClC,EAAaC,GAC5BgB,EAAkBI,SACpBY,EAASP,EAA0BC,EAAO3B,EAAKC,KAI7CkC,EAAkB,WACtBhB,GAAgB,IAGZiB,EAAa,SAACnC,EAAgBD,GAClC,IAAMD,EA7CU,SAACC,EAAaC,GAC9B,MAAM,QAAN,OAAeD,EAAf,YAAsBC,GA4CXoC,CAAUrC,EAAKC,GAE1B,MAAO,CACLF,GAAIA,EACJE,OAAQA,EACRD,IAAKA,EACLK,KA/CgB,SAACiC,GACnB,OAAQA,GACN,KAAKhB,EACH,MAAO,QACT,KAAKC,EACH,MAAO,SACT,QACE,OAAO,MAmCEgB,CAAYxC,GAMvByC,aAAc,KACdC,SAAUC,IACVxC,YAAa8B,EACb7B,aAAc+B,EACd9B,UAAW+B,IA7E4B,EAgGjBrB,mBAfD,SACvBF,EACAJ,GAGA,IADA,IAAMmC,EAA4B,GACzBC,EAAS,EAAGA,EAAShC,EAASgC,IAAU,CAE/C,IADA,IAAMC,EAAiC,GAC9BC,EAAS,EAAGA,EAAStC,EAASsC,IACrCD,EAAkBE,KAAKX,EAAWU,EAAQF,IAE5CD,EAAWI,KAAKF,GAElB,OAAOF,EAIPK,CAAiBpC,EAASJ,IAjGe,mBAgGpCmB,EAhGoC,KAgG7BM,EAhG6B,KAoGrCF,EAAiB,SAACkB,GACtB,OAAQA,GACN,IAAK,OACH,OAAO,KACT,IAAK,QACH,MAAO,QACT,IAAK,SACH,MAAO,SACT,QACE,MAAO,SAIPC,EAAiBvB,EAAMwB,KAAI,SAACC,EAAMC,GACtC,OACE,8BACGD,EAAKD,KAAI,SAACnD,EAAKsD,GACd,OACE,cAAC9D,EAAD,CAEEM,SAAUE,GADLA,EAAID,QAJPsD,MAad,OAAO,qBAAKxD,UAAU,cAAf,SAA8BqD,I,ICzIhC,E,SCEDK,G,MAAaC,EAAQ,KAgBdC,EAAb,4MACEC,MAAyB,CACvBC,gBAAgB,GAFpB,EAKEC,cAAgB,WACd,EAAKC,SAAS,CAAEF,gBAAgB,KANpC,mEASwB,IAAD,OACnBG,YAAW,WACL,EAAKJ,MAAMC,eACbI,OAAOC,iBAAiB,QAAS,EAAKJ,eAEtCG,OAAOE,oBAAoB,QAAS,EAAKL,iBAE1C,KAhBP,+BAmBY,IAAD,OACDM,EAAUC,KAAK1E,MAAMyE,QAAQf,KAAI,SAACiB,GAAD,OACrC,qBAEEvE,UAAU,kBACVwE,QAAS,kBAAM,EAAK5E,MAAM6E,eAAeF,EAAOG,OAHlD,SAKGH,EAAOI,OAJHJ,EAAOI,UAOVC,EAAqBlB,EAAW,CACpC,kBAAkB,EAClBmB,QAASP,KAAKT,MAAMC,eACpBgB,WAAYR,KAAKT,MAAMC,iBAEzB,OACE,sBACE9D,UAAU,gBACVwE,QAAS,WACP,EAAKR,SAAS,CAAEF,gBAAiB,EAAKD,MAAMC,kBAHhD,UAME,sBAAK9D,UAAW4E,EAAhB,UACE,qBAAK5E,UAAU,iBAAf,SAAiCsE,KAAK1E,MAAM+E,QAC5C,qBAAK3E,UAAU,iBAAf,SACGsE,KAAKT,MAAMC,eACV,cAAC,IAAD,CAAW9D,UAAU,kBAErB,cAAC,IAAD,CAAaA,UAAU,yBAI5BsE,KAAKT,MAAMC,gBACV,qBAAK9D,UAAU,4BAAf,SAA4CqE,WApDtD,GAAuCU,IAAMC,Y,YDZ3C,IAAMC,EAA0B,IAAInF,I,uBAE7B,WACL,OAAOmF,G,WAEF,SAAkBC,GACrB,OAAO,SAA4CC,GAEjD,OADAF,EAAwBlF,IAAImF,EAAK,IAAIC,GAC9BA,I,CAdEC,M,KEEV,I,EADNA,EAAkBC,SAAS,YAC5B,oDACEV,MAAQ,uBADV,2FAMI,OAAOL,KAAKK,UANhB,MCDCS,EAAkBC,SAAS,QAC5B,cAKI,aAAc,oBACVf,KAAKK,MAAQ,YANrB,uDAGQhD,QAAQC,IAAI,qBAHpB,gDAUQ,OAAO0C,KAAKK,UAVpB,M,MCEO,SAASW,IACd,IAAMC,EAAeH,EAAkBI,uBADhB,EAU2BvE,mBAChD,MAXqB,mBAUhBwE,EAVgB,KAUGC,EAVH,KAcjBC,EAGA,GACNJ,EAAaK,SAAQ,SAACC,EAAMX,GAC1BS,EAAgBzC,KAAK,CACnByB,MAAOkB,EAAKC,WACZpB,KAAM,CAAEQ,IAAKA,EAAKP,MAAOkB,EAAKC,iBAGlC,IAAMC,EAAe,CACnBpB,MAAO,aACPN,QAASsB,GAGX,OACE,sBAAK3F,UAAU,mBAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC,EAAD,CACE2E,MAAOoB,EAAapB,MACpBN,QAAS0B,EAAa1B,QACtBI,eAhCoB,SAACC,GAC3B,GAAIa,EAAaS,IAAItB,EAAKQ,KAAM,CAC9B,IAAMe,EAAYV,EAAa9E,IAAIiE,EAAKQ,KACxCQ,EAAqBO,GACrBA,EAAUC,iBA+BV,yBAAQlG,UAAU,mBAAlB,8BACayF,QADb,IACaA,OADb,EACaA,EAAmBK,iB,UC/BjBK,E,4MAEnBtC,MAAyB,CACvBuC,aAAc,EACdC,aAAc,EACdC,MAAO,G,EAMTC,iBAAmB,WAAO,IAAD,EACjBF,EAAY,UAAG,EAAKG,qBAAR,aAAG,EAAoBC,aACnCL,EAAelC,OAAOwC,YACtBJ,EAAQpC,OAAOyC,WAEnB,EAAK9C,MAAMuC,eAAiBA,GAC5B,EAAKvC,MAAMyC,QAAUA,GAErB,EAAKtC,SAAS,CACZqC,aAAcA,EACdC,MAAOA,EACPF,aAAcA,K,kEAdlB9B,KAAKiC,qB,+BAmBG,IAAD,OACDzE,EAAQwC,KAAKT,MAAMuC,aACvB,qBAAKpG,UAAU,kBAAf,SACE,cAACU,EAAD,CACEM,YAAasD,KAAKT,MAAMuC,aAAe9B,KAAKT,MAAMwC,aAClDvF,WAAYwD,KAAKT,MAAMyC,UAGzB,KACJ,OACE,sBAAKtG,UAAU,gBAAf,UACE,qBACEA,UAAU,mBACV4G,IAAK,SAACJ,GACJ,EAAKA,cAAgBA,GAHzB,SAME,cAAClB,EAAD,MAEDxD,S,GA9CiCiD,IAAMC,WCFjC6B,MARf,WACE,OACE,qBAAK7G,UAAU,MAAf,SACE,cAAC,EAAD,OCMS8G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58749215.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./graph-node-component.scss\";\r\nimport { GraphNode, NodeType } from \"./graph-node-model\";\r\n\r\ninterface Props {\r\n  nodeData: GraphNode;\r\n}\r\n\r\nexport function GraphNodeComponent(props: Props) {\r\n  const typeTemplateMap = new Map<NodeType, any>()\r\n    .set(\"start\", <div className=\"start-node\"></div>)\r\n    .set(\"target\", <div className=\"target-node\"></div>)\r\n    .set(\"wall\", <div className=\"wall\"></div>);\r\n\r\n  const {\r\n    id,\r\n    row,\r\n    column,\r\n    onMouseDown,\r\n    onMouseEnter,\r\n    onMouseUp,\r\n    type,\r\n  } = props.nodeData;\r\n\r\n  return (\r\n    <div\r\n      id={id}\r\n      className=\"graph-node\"\r\n      onMouseDown={() => onMouseDown(row, column)}\r\n      onMouseEnter={() => onMouseEnter(row, column)}\r\n      onMouseUp={() => onMouseUp(row, column)}\r\n    >\r\n      {typeTemplateMap.get(type!)}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { GraphNodeComponent } from \"../graph-node/graph-node-component\";\r\nimport { GraphNode, NodeType } from \"../graph-node/graph-node-model\";\r\nimport \"./graph-container.css\";\r\n\r\ninterface Props {\r\n  graphHeight: number;\r\n  graphWidth: number;\r\n}\r\n\r\nexport function GraphContainer(props: Props) {\r\n  const NODE_HEIGHT = 25.5;\r\n  const NODE_WIDTH = 25;\r\n  const maxCols = Math.floor(props.graphWidth / NODE_WIDTH);\r\n  const maxRows = Math.floor(props.graphHeight / NODE_HEIGHT);\r\n\r\n  const [isMousePressed, _setMousePressed] = useState<boolean>(false);\r\n  const isMousePressedRef = useRef(isMousePressed);\r\n  const setMousePressed = (setPressed: boolean) => {\r\n    isMousePressedRef.current = setPressed;\r\n    _setMousePressed(setPressed);\r\n  };\r\n\r\n  const [startNodeId] = useState<string | undefined>(\r\n    `node-${Math.floor(maxRows / 2)}-${maxCols - Math.floor(maxCols * 0.9)}`\r\n  );\r\n  const [targetNodeId] = useState<string | undefined>(\r\n    `node-${Math.floor(maxRows / 2)}-${maxCols - Math.floor(maxCols * 0.1)}`\r\n  );\r\n  console.log(startNodeId, targetNodeId);\r\n\r\n  const getNodeId = (row: number, column: number): string => {\r\n    return `node-${row}-${column}`;\r\n  };\r\n\r\n  const getNodeType = (currentId: string): NodeType | null => {\r\n    switch (currentId) {\r\n      case startNodeId:\r\n        return \"start\";\r\n      case targetNodeId:\r\n        return \"target\";\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getNewGraphWithWallToggle = (\r\n    graph: GraphNode[][],\r\n    row: number,\r\n    column: number\r\n  ): GraphNode[][] => {\r\n    const newGraph = graph.slice();\r\n    const graphNode = newGraph[row][column];\r\n    newGraph[row][column] = {\r\n      ...graphNode,\r\n      type: getUpdatedType(graphNode.type),\r\n    };\r\n    return newGraph;\r\n  };\r\n\r\n  const onNodePressed = (row: number, column: number) => {\r\n    setMousePressed(true);\r\n    setGraph(getNewGraphWithWallToggle(graph, row, column));\r\n  };\r\n\r\n  const onNodeEnter = (row: number, column: number) => {\r\n    if (isMousePressedRef.current) {\r\n      setGraph(getNewGraphWithWallToggle(graph, row, column));\r\n    }\r\n  };\r\n\r\n  const onNodeUnpressed = () => {\r\n    setMousePressed(false);\r\n  };\r\n\r\n  const createNode = (column: number, row: number): GraphNode => {\r\n    const id = getNodeId(row, column);\r\n    const type = getNodeType(id);\r\n    return {\r\n      id: id,\r\n      column: column,\r\n      row: row,\r\n      type: type,\r\n      previousNode: null,\r\n      distance: Infinity,\r\n      onMouseDown: onNodePressed,\r\n      onMouseEnter: onNodeEnter,\r\n      onMouseUp: onNodeUnpressed,\r\n    };\r\n  };\r\n\r\n  const createGraphNodes = (\r\n    maxRows: number,\r\n    maxCols: number\r\n  ): GraphNode[][] => {\r\n    const graphNodes: GraphNode[][] = [];\r\n    for (let rowNum = 0; rowNum < maxRows; rowNum++) {\r\n      const currentRowColumns: GraphNode[] = [];\r\n      for (let colNum = 0; colNum < maxCols; colNum++) {\r\n        currentRowColumns.push(createNode(colNum, rowNum));\r\n      }\r\n      graphNodes.push(currentRowColumns);\r\n    }\r\n    return graphNodes;\r\n  };\r\n\r\n  const [graph, setGraph] = useState<GraphNode[][]>(\r\n    createGraphNodes(maxRows, maxCols)\r\n  );\r\n\r\n  const getUpdatedType = (currentType?: NodeType | null): NodeType | null => {\r\n    switch (currentType) {\r\n      case \"wall\":\r\n        return null;\r\n      case \"start\":\r\n        return \"start\";\r\n      case \"target\":\r\n        return \"target\";\r\n      default:\r\n        return \"wall\";\r\n    }\r\n  };\r\n\r\n  const graphComponent = graph.map((rows, col) => {\r\n    return (\r\n      <div key={col}>\r\n        {rows.map((row, rowIdx) => {\r\n          return (\r\n            <GraphNodeComponent\r\n              key={row.id}\r\n              nodeData={row}\r\n            ></GraphNodeComponent>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"graph-nodes\">{graphComponent}</div>;\r\n}\r\n","\r\nexport namespace AlgorithmRegistry {\r\n  export type Constructor<T> = {\r\n    new (...args: any[]): T;\r\n    readonly prototype: T;\r\n  };\r\n  \r\n  const keyVsAlgoConstructorMap = new Map<string, Algorithm>();\r\n\r\n  export function GetImplementationMap():  Map<string, Algorithm> {\r\n    return keyVsAlgoConstructorMap;\r\n  }\r\n  export function register(key: string){\r\n      return function <T extends Constructor<Algorithm>>(ctor: T) {\r\n        keyVsAlgoConstructorMap.set(key, new ctor());\r\n        return ctor;\r\n      }\r\n  }\r\n}\r\n\r\nexport interface Algorithm {\r\n    doAThing(): void;\r\n    getLabel(): string;\r\n  }","import React from \"react\";\r\nimport { FaAngleDown, FaAngleUp } from \"react-icons/fa\";\r\nimport \"./dropdown-component.scss\";\r\nconst classNames = require(\"classnames\");\r\ninterface Props {\r\n  label: string;\r\n  options: DropdownOption[];\r\n  onSelectOption: (data: any) => void;\r\n}\r\n\r\nexport interface DropdownOption {\r\n  label: string;\r\n  data?: any;\r\n}\r\n\r\ninterface State {\r\n  isDropdownOpen: boolean;\r\n}\r\n\r\nexport class DropdownComponent extends React.Component<Props, State> {\r\n  state: Readonly<State> = {\r\n    isDropdownOpen: false,\r\n  };\r\n\r\n  closeDropdown = () => {\r\n    this.setState({ isDropdownOpen: false });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(() => {\r\n      if (this.state.isDropdownOpen) {\r\n        window.addEventListener(\"click\", this.closeDropdown);\r\n      } else {\r\n        window.removeEventListener(\"click\", this.closeDropdown);\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    const options = this.props.options.map((option) => (\r\n      <div\r\n        key={option.label}\r\n        className=\"dropdown-option\"\r\n        onClick={() => this.props.onSelectOption(option.data)}\r\n      >\r\n        {option.label}\r\n      </div>\r\n    ));\r\n    const dropdownTitleClass = classNames({\r\n      \"dropdown-title\": true,\r\n      clicked: this.state.isDropdownOpen,\r\n      unclicked: !this.state.isDropdownOpen,\r\n    });\r\n    return (\r\n      <div\r\n        className=\"dropdown-body\"\r\n        onClick={() => {\r\n          this.setState({ isDropdownOpen: !this.state.isDropdownOpen });\r\n        }}\r\n      >\r\n        <div className={dropdownTitleClass}>\r\n          <div className=\"dropdown-label\">{this.props.label}</div>\r\n          <div className=\"icon-container\">\r\n            {this.state.isDropdownOpen ? (\r\n              <FaAngleUp className=\"caret-up-icon\" />\r\n            ) : (\r\n              <FaAngleDown className=\"caret-down-icon\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        {this.state.isDropdownOpen && (\r\n          <div className=\"dropdown-option-container\">{options}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { AlgorithmRegistry } from \"./algorithm-registry\";\r\n\r\n@AlgorithmRegistry.register(\"dijkstras\")\r\nexport class DijkstrasAlgorithm {\r\n  label = \"Dijkstra's Algorithm\";\r\n\r\n  doAThing() {}\r\n\r\n  getLabel() {\r\n    return this.label;\r\n  }\r\n}\r\n","import { AlgorithmRegistry } from \"./algorithm-registry\";\r\n\r\n@AlgorithmRegistry.register(\"astar\")\r\nexport class AstarAlgorithm{\r\n    label:string;\r\n    doAThing(){\r\n        console.log(\"reached astar\");\r\n    }\r\n    constructor(){\r\n        this.label = \"A* Search\";\r\n    }\r\n\r\n    getLabel(){\r\n        return this.label;\r\n    }\r\n}","import { useState } from \"react\";\r\nimport { DropdownComponent } from \"../dropdown/dropdown-component\";\r\nimport { Algorithm, AlgorithmRegistry } from \"./../../algorithms\";\r\nimport \"./header.scss\";\r\n\r\nexport function Header() {\r\n  const keyVsAlgoMap = AlgorithmRegistry.GetImplementationMap();\r\n\r\n  const onAlgorithmSelected = (data: { key: string }) => {\r\n    if (keyVsAlgoMap.has(data.key)) {\r\n      const algorithm = keyVsAlgoMap.get(data.key)!;\r\n      setSelectedAlgorithm(algorithm);\r\n      algorithm.doAThing();\r\n    }\r\n  };\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithm | null>(\r\n    null\r\n  );\r\n\r\n  const dropdownOptions: {\r\n    label: string;\r\n    data: { key: string; label: string };\r\n  }[] = [];\r\n  keyVsAlgoMap.forEach((algo, key) => {\r\n    dropdownOptions.push({\r\n      label: algo.getLabel(),\r\n      data: { key: key, label: algo.getLabel() },\r\n    });\r\n  });\r\n  const dropdownData = {\r\n    label: \"Algorithms\",\r\n    options: dropdownOptions,\r\n  };\r\n\r\n  return (\r\n    <div className=\"header-component\">\r\n      <div className=\"dropdown-container\">\r\n        <DropdownComponent\r\n          label={dropdownData.label}\r\n          options={dropdownData.options}\r\n          onSelectOption={onAlgorithmSelected}\r\n        />\r\n      </div>\r\n      <button className=\"visualize-button\">\r\n        Visualize {selectedAlgorithm?.getLabel()}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { GraphContainer } from \"../graph-container/graph-container\";\r\nimport { Header } from \"../header/header\";\r\nimport \"./app-container.css\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  windowHeight: number;\r\n  headerHeight: number | undefined;\r\n  width: number;\r\n}\r\n\r\nexport default class AppContainer extends React.Component<Props, State> {\r\n  headerElement: HTMLElement | undefined | null;\r\n  state: Readonly<State> = {\r\n    windowHeight: 0,\r\n    headerHeight: 0,\r\n    width: 0,\r\n  };\r\n  componentDidMount() {\r\n    this.updateDimensions();\r\n  }\r\n\r\n  updateDimensions = () => {\r\n    const headerHeight = this.headerElement?.clientHeight;\r\n    const windowHeight = window.innerHeight;\r\n    const width = window.innerWidth;\r\n    if (\r\n      this.state.windowHeight !== windowHeight ||\r\n      this.state.width !== width\r\n    ) {\r\n      this.setState({\r\n        headerHeight: headerHeight,\r\n        width: width,\r\n        windowHeight: windowHeight,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const graph = this.state.windowHeight ? (\r\n      <div className=\"graph-container\">\r\n        <GraphContainer\r\n          graphHeight={this.state.windowHeight - this.state.headerHeight!}\r\n          graphWidth={this.state.width}\r\n        />\r\n      </div>\r\n    ) : null;\r\n    return (\r\n      <div className=\"app-container\">\r\n        <div\r\n          className=\"header-container\"\r\n          ref={(headerElement) => {\r\n            this.headerElement = headerElement;\r\n          }}\r\n        >\r\n          <Header />\r\n        </div>\r\n        {graph}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\r\nimport AppContainer from \"./components/app-container/app-container.tsx\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}