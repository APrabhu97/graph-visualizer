{"version":3,"sources":["algorithms/algorithm-registry.tsx","components/graph-node/graph-node-component.tsx","components/graph-container/graph-container.tsx","components/dropdown/dropdown-component.tsx","algorithms/dijkstras-algorithm.tsx","algorithms/astar-algorithm.tsx","components/header/header.tsx","components/app-container/app-container.tsx","App.js","reportWebVitals.js","index.js"],"names":["GraphNodeComponent","this","props","nodeData","row","column","onMouseDown","onMouseEnter","onMouseUp","dynamicCssClass","isWall","id","className","event","preventDefault","React","Component","GraphContainer","NODE_HEIGHT","NODE_WIDTH","state","height","width","startNode","targetNode","graph","mouseIsPressed","createGraphNodes","maxCols","Math","floor","graphNodes","maxRows","rowNum","currentRowColumns","colNum","push","createNode","isStart","isVisited","isFinish","previousNode","distance","Infinity","onNodePressed","onNodeEnter","onNodeUnpressed","console","log","setState","getNewGraphWithWallToggle","newGraph","slice","graphNode","Object","assign","graphHeight","graphWidth","componentDidMount","map","rows","col","rowIdx","classNames","require","DropdownComponent","isDropdownOpen","closeDropdown","setTimeout","window","addEventListener","removeEventListener","options","option","onClick","onSelectOption","data","label","dropdownTitleClass","clicked","unclicked","keyVsAlgoConstructorMap","Map","key","ctor","set","AlgorithmRegistry","register","Header","keyVsAlgoMap","GetImplementationMap","useState","selectedAlgorithm","setSelectedAlgorithm","dropdownOptions","forEach","algo","getLabel","dropdownData","has","algorithm","get","doAThing","AppContainer","windowHeight","headerHeight","updateDimensions","headerElement","clientHeight","innerHeight","innerWidth","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.889d08c7.chunk.js","sourcesContent":["\r\nexport namespace AlgorithmRegistry {\r\n  export type Constructor<T> = {\r\n    new (...args: any[]): T;\r\n    readonly prototype: T;\r\n  };\r\n  \r\n  const keyVsAlgoConstructorMap = new Map<string, Algorithm>();\r\n\r\n  export function GetImplementationMap():  Map<string, Algorithm> {\r\n    return keyVsAlgoConstructorMap;\r\n  }\r\n  export function register(key: string){\r\n      return function <T extends Constructor<Algorithm>>(ctor: T) {\r\n        keyVsAlgoConstructorMap.set(key, new ctor());\r\n        return ctor;\r\n      }\r\n  }\r\n}\r\n\r\nexport interface Algorithm {\r\n    doAThing(): void;\r\n    getLabel(): string;\r\n  }","import React from \"react\";\r\nimport \"./graph-node-component.scss\";\r\nimport { GraphNode } from \"./graph-node-model\";\r\n\r\ninterface Props {\r\n  nodeData: GraphNode;\r\n}\r\n\r\ninterface State {}\r\n\r\nexport default class GraphNodeComponent extends React.Component<Props, State> {\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      isWall,\r\n    } = this.props.nodeData;\r\n    const dynamicCssClass = isWall ? \"wall\" : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${column}`}\r\n        className={\"graph-node \" + dynamicCssClass}\r\n        onMouseDown={(event) => {\r\n          event.preventDefault();\r\n          onMouseDown(row, column);\r\n        }}\r\n        onMouseEnter={() => onMouseEnter(row, column)}\r\n        onMouseUp={() => onMouseUp(row, column)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport GraphNodeComponent from \"../graph-node/graph-node-component\";\r\nimport { GraphNode } from \"../graph-node/graph-node-model\";\r\nimport \"./graph-container.css\";\r\n\r\ninterface Props {\r\n  graphHeight: number;\r\n  graphWidth: number;\r\n}\r\n\r\ninterface State {\r\n  height: number | undefined;\r\n  width: number | undefined;\r\n  startNode: GraphNode | null;\r\n  targetNode: GraphNode | null;\r\n  graph: GraphNode[][];\r\n  mouseIsPressed: boolean;\r\n}\r\nexport default class GraphContainer extends React.Component<Props, State> {\r\n  divElement: HTMLDivElement | null | undefined;\r\n  NODE_HEIGHT = 25.5;\r\n  NODE_WIDTH = 25;\r\n  state: Readonly<State> = {\r\n    height: 0,\r\n    width: 0,\r\n    startNode: null,\r\n    targetNode: null,\r\n    graph: [],\r\n    mouseIsPressed: false,\r\n  };\r\n\r\n  createGraphNodes = (height: number, width: number): GraphNode[][] => {\r\n    const maxCols = Math.floor(width / this.NODE_WIDTH);\r\n    const graphNodes: GraphNode[][] = [];\r\n    const maxRows = Math.floor(height / this.NODE_HEIGHT);\r\n    for (let rowNum = 0; rowNum < maxRows; rowNum++) {\r\n      const currentRowColumns: GraphNode[] = [];\r\n      for (let colNum = 0; colNum < maxCols; colNum++) {\r\n        currentRowColumns.push(this.createNode(colNum, rowNum));\r\n      }\r\n      graphNodes.push(currentRowColumns);\r\n    }\r\n    return graphNodes;\r\n  };\r\n\r\n  createNode = (column: number, row: number): GraphNode => {\r\n    return {\r\n      column: column,\r\n      row: row,\r\n      isStart:\r\n        this.state.startNode?.column === column &&\r\n        this.state.startNode?.row === row,\r\n      isVisited: false,\r\n      isWall: false,\r\n      isFinish:\r\n        this.state.targetNode?.column === column &&\r\n        this.state.targetNode?.row === row,\r\n      previousNode: null,\r\n      distance: Infinity,\r\n      onMouseDown: this.onNodePressed,\r\n      onMouseEnter: this.onNodeEnter,\r\n      onMouseUp: this.onNodeUnpressed,\r\n      mouseIsPressed: false,\r\n    };\r\n  };\r\n\r\n  onNodePressed = (row: number, column: number) => {\r\n    console.log(row, column);\r\n    this.setState({\r\n      graph: this.getNewGraphWithWallToggle(this.state.graph, row, column),\r\n      mouseIsPressed: true,\r\n    });\r\n  };\r\n\r\n  onNodeEnter = (row: number, column: number) => {\r\n    if (this.state.mouseIsPressed) {\r\n      this.setState({\r\n        graph: this.getNewGraphWithWallToggle(this.state.graph, row, column),\r\n      });\r\n    }\r\n  };\r\n\r\n  getNewGraphWithWallToggle = (\r\n    graph: GraphNode[][],\r\n    row: number,\r\n    column: number\r\n  ): GraphNode[][] => {\r\n    const newGraph = graph.slice();\r\n    const graphNode = newGraph[row][column];\r\n    newGraph[row][column] = Object.assign({}, graphNode, {\r\n      isWall: !graphNode.isWall,\r\n    });\r\n    return newGraph;\r\n  };\r\n\r\n  onNodeUnpressed = (row: number, column: number) => {\r\n    this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      graph: this.createGraphNodes(\r\n        this.props.graphHeight,\r\n        this.props.graphWidth\r\n      ),\r\n      height: this.props.graphHeight,\r\n      width: this.props.graphWidth,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (\r\n      this.props.graphHeight !== this.state.height ||\r\n      this.props.graphWidth !== this.state.width\r\n    ) {\r\n      this.componentDidMount();\r\n    }\r\n    const graph = this.state.graph.map((rows, col) => {\r\n      return (\r\n        <div key={col}>\r\n          {rows.map((row, rowIdx) => {\r\n            return (\r\n              <GraphNodeComponent\r\n                key={rowIdx}\r\n                nodeData={row}\r\n              ></GraphNodeComponent>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return <div className=\"graph-nodes\">{graph}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { FaAngleDown, FaAngleUp } from \"react-icons/fa\";\r\nimport \"./dropdown-component.scss\";\r\nconst classNames = require(\"classnames\");\r\ninterface Props {\r\n  label: string;\r\n  options: DropdownOption[];\r\n  onSelectOption: (data: any) => void;\r\n}\r\n\r\nexport interface DropdownOption {\r\n  label: string;\r\n  data?: any;\r\n}\r\n\r\ninterface State {\r\n  isDropdownOpen: boolean;\r\n}\r\n\r\nexport class DropdownComponent extends React.Component<Props, State> {\r\n  state: Readonly<State> = {\r\n    isDropdownOpen: false,\r\n  };\r\n\r\n  closeDropdown = () => {\r\n    this.setState({ isDropdownOpen: false });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(() => {\r\n      if (this.state.isDropdownOpen) {\r\n        window.addEventListener(\"click\", this.closeDropdown);\r\n      } else {\r\n        window.removeEventListener(\"click\", this.closeDropdown);\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  render() {\r\n    const options = this.props.options.map((option) => (\r\n      <div\r\n        key={option.label}\r\n        className=\"dropdown-option\"\r\n        onClick={() => this.props.onSelectOption(option.data)}\r\n      >\r\n        {option.label}\r\n      </div>\r\n    ));\r\n    const dropdownTitleClass = classNames({\r\n      \"dropdown-title\": true,\r\n      clicked: this.state.isDropdownOpen,\r\n      unclicked: !this.state.isDropdownOpen,\r\n    });\r\n    return (\r\n      <div\r\n        className=\"dropdown-body\"\r\n        onClick={() => {\r\n          this.setState({ isDropdownOpen: !this.state.isDropdownOpen });\r\n        }}\r\n      >\r\n        <div className={dropdownTitleClass}>\r\n          <div className=\"dropdown-label\">{this.props.label}</div>\r\n          <div className=\"icon-container\">\r\n            {this.state.isDropdownOpen ? (\r\n              <FaAngleUp className=\"caret-up-icon\" />\r\n            ) : (\r\n              <FaAngleDown className=\"caret-down-icon\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n        {this.state.isDropdownOpen && (\r\n          <div className=\"dropdown-option-container\">{options}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { AlgorithmRegistry } from \"./algorithm-registry\";\r\n\r\n@AlgorithmRegistry.register(\"dijkstras\")\r\nexport class DijkstrasAlgorithm{\r\n    label: string;\r\n    doAThing(){\r\n        console.log(\"reached dijkstras\");\r\n    }\r\n    constructor(){\r\n        this.label = \"Dijkstra's Algorithm\";\r\n    }\r\n\r\n    getLabel(){\r\n        return this.label;\r\n    }\r\n}","import { AlgorithmRegistry } from \"./algorithm-registry\";\r\n\r\n@AlgorithmRegistry.register(\"astar\")\r\nexport class AstarAlgorithm{\r\n    label:string;\r\n    doAThing(){\r\n        console.log(\"reached astar\");\r\n    }\r\n    constructor(){\r\n        this.label = \"A* Search\";\r\n    }\r\n\r\n    getLabel(){\r\n        return this.label;\r\n    }\r\n}","import { useState } from \"react\";\r\nimport { DropdownComponent } from \"../dropdown/dropdown-component\";\r\nimport { Algorithm, AlgorithmRegistry } from \"./../../algorithms\";\r\nimport \"./header.scss\";\r\n\r\nexport function Header() {\r\n  const keyVsAlgoMap = AlgorithmRegistry.GetImplementationMap();\r\n\r\n  const onAlgorithmSelected = (data: { key: string }) => {\r\n    if (keyVsAlgoMap.has(data.key)) {\r\n      const algorithm = keyVsAlgoMap.get(data.key)!;\r\n      setSelectedAlgorithm(algorithm);\r\n      algorithm.doAThing();\r\n    }\r\n  };\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithm | null>(\r\n    null\r\n  );\r\n\r\n  const dropdownOptions: {\r\n    label: string;\r\n    data: { key: string; label: string };\r\n  }[] = [];\r\n  keyVsAlgoMap.forEach((algo, key) => {\r\n    dropdownOptions.push({\r\n      label: algo.getLabel(),\r\n      data: { key: key, label: algo.getLabel() },\r\n    });\r\n  });\r\n  const dropdownData = {\r\n    label: \"Algorithms\",\r\n    options: dropdownOptions,\r\n  };\r\n\r\n  return (\r\n    <div className=\"header-component\">\r\n      <div className=\"dropdown-container\">\r\n        <DropdownComponent\r\n          label={dropdownData.label}\r\n          options={dropdownData.options}\r\n          onSelectOption={onAlgorithmSelected}\r\n        />\r\n      </div>\r\n      <button className=\"visualize-button\">\r\n        Visualize {selectedAlgorithm?.getLabel()}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport GraphContainer from \"../graph-container/graph-container\";\r\nimport { Header } from \"../header/header\";\r\n\r\nimport \"./app-container.css\";\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  windowHeight: number;\r\n  headerHeight: number | undefined;\r\n  width: number;\r\n}\r\n\r\nexport default class AppContainer extends React.Component<Props, State> {\r\n  headerElement: HTMLElement | undefined | null;\r\n  state: Readonly<State> = {\r\n    windowHeight: 0,\r\n    headerHeight: 0,\r\n    width: 0,\r\n  };\r\n  componentDidMount() {\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  updateDimensions = () => {\r\n    const headerHeight = this.headerElement?.clientHeight;\r\n    const windowHeight = window.innerHeight;\r\n    const width = window.innerWidth;\r\n    if (\r\n      this.state.windowHeight !== windowHeight ||\r\n      this.state.width !== width\r\n    ) {\r\n      this.setState({\r\n        headerHeight: headerHeight,\r\n        width: width,\r\n        windowHeight: windowHeight,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <div\r\n          className=\"header-container\"\r\n          ref={(headerElement) => {\r\n            this.headerElement = headerElement;\r\n          }}\r\n        >\r\n          <Header />\r\n        </div>\r\n        <div className=\"graph-container\">\r\n          <GraphContainer\r\n            graphHeight={this.state.windowHeight - this.state.headerHeight!}\r\n            graphWidth={this.state.width}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport AppContainer from \"./components/app-container/app-container.tsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}